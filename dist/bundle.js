(()=>{"use strict";function e(e,t,n){const r=n.value;return{configurable:!0,get(){return r.bind(this)}}}var t;!function(e){e.ACTIVE="active",e.FINISHED="finished"}(t||(t={}));class n{constructor(e,t,n,r,s){this.Id=e,this.Title=t,this.Description=n,this.People=r,this.Status=s}}class r extends class{constructor(){this.listeners=[]}addListener(e){this.listeners.push(e)}}{constructor(){super(),this.projects=[]}static getInstance(){return this.instance||(this.instance=new r),this.instance}addProject(e,r,s){const i=new n(Date.now().toString(),e,r,s,t.ACTIVE);this.projects.push(i),this.updateListeners()}moveProject(e,t){const n=this.projects.find((t=>t.Id===e));n&&n.Status!==t&&(n.Status=t,this.updateListeners())}updateListeners(){for(const e of this.listeners)e(this.projects.slice())}}const s=r.getInstance();class i{constructor(e){this.input=e}validate(){let e=this.input,t=!0;return e.required&&(t=t&&0!==e.value.toString().trim().length,!t)?(alert(`${e.name} kitöltése kötelező!`),!1):null==e.minLength||"string"!=typeof e.value||(t=t&&e.value.length>e.minLength,t)?null==e.maxLength||"string"!=typeof e.value||(t=t&&e.value.length>e.maxLength,t)?null==e.min||"number"!=typeof e.value||(t=t&&e.value>=e.min,t)?null==e.max||"number"!=typeof e.value||(t=t&&e.value<=e.max,t)?t:(alert(`${e.name} értéke maximum ${e.max}!`),!1):(alert(`${e.name} értéke minimum ${e.min}!`),!1):(alert(`${e.name} hossza maximum ${e.maxLength}!`),!1):(alert(`${e.name} hossza minimum ${e.minLength}!`),!1)}}class l{constructor(e,t,n,r){this.templateElement=document.getElementById(e),this.hostElement=document.getElementById(t);const s=document.importNode(this.templateElement.content,!0);this.element=s.firstElementChild,r&&(this.element.id=r),this.attach(n)}attach(e){this.hostElement.insertAdjacentElement(e?"afterbegin":"beforeend",this.element)}}class a extends l{constructor(){super("project-input","app",!0,"user-input"),this.titleInputElement=this.element.querySelector("#title"),this.descriptionInputElement=this.element.querySelector("#description"),this.peopleInputElement=this.element.querySelector("#people"),this.configure()}configure(){this.element.addEventListener("submit",this.submitHandler)}renderContent(){}gatherUserInput(){const e=this.titleInputElement.value,t=this.descriptionInputElement.value,n=this.peopleInputElement.value,r=new i({name:this.titleInputElement.name,value:e,required:!0}),s=new i({name:this.descriptionInputElement.name,value:t,required:!0,minLength:5}),l=new i({name:this.peopleInputElement.name,value:+n,required:!0,min:1,max:5});return r.validate()&&s.validate()&&l.validate()?[e,t,+n]:void 0}clearInputs(){this.element.reset()}submitHandler(e){e.preventDefault();const t=this.gatherUserInput();if(Array.isArray(t)){const[e,n,r]=t;s.addProject(e,n,r),this.clearInputs()}}}!function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);i>3&&l&&Object.defineProperty(t,n,l)}([e],a.prototype,"submitHandler",null);var o=function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);return i>3&&l&&Object.defineProperty(t,n,l),l};class c extends l{constructor(e,t){super("single-project",e,!1,t.Id),this.project=t,this.configure(),this.renderContent()}get persons(){return 1===this.project.People?"1 person":`${this.project.People} persons`}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.Id),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)}renderContent(){this.element.querySelector("h2").textContent=this.project.Title,this.element.querySelector("h3").textContent=this.persons,this.element.querySelector("p").textContent=this.project.Description}}o([e],c.prototype,"dragStartHandler",null),o([e],c.prototype,"dragEndHandler",null);var d=function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);return i>3&&l&&Object.defineProperty(t,n,l),l};class u extends l{constructor(e){super("project-list","app",!1,`${e}-projects`),this.type=e,this.assignedProjects=[],this.configure(),this.renderContent()}dragOverHandler(e){if(e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]){e.preventDefault();const t=this.element.querySelector("ul");null==t||t.classList.add("droppable")}}dropHandler(e){const t=e.dataTransfer.getData("text/plain");s.moveProject(t,this.type)}dragLeaveHandler(e){const t=this.element.querySelector("ul");null==t||t.classList.remove("droppable")}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dropHandler),s.addListener((e=>{const n=e.filter((e=>this.type===t.ACTIVE?e.Status===t.ACTIVE:e.Status===t.FINISHED));this.assignedProjects=n,this.renderProjects()})),this.renderContent()}renderContent(){const e=`${this.type}-project-list`;this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=this.type.toUpperCase()+"PROJECTS"}renderProjects(){document.getElementById(`${this.type}-project-list`).innerHTML="";for(const e of this.assignedProjects)new c(this.element.querySelector("ul").id,e)}}d([e],u.prototype,"dragOverHandler",null),d([e],u.prototype,"dropHandler",null),d([e],u.prototype,"dragLeaveHandler",null),new a,new u(t.ACTIVE),new u(t.FINISHED)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,